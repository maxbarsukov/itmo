require 'net/ftp'

module Net
  class FTP
    alias_method :original_getbinaryfile, :getbinaryfile
    alias_method :original_gettextfile, :gettextfile
    alias_method :original_putbinaryfile, :putbinaryfile
    alias_method :original_puttextfile, :puttextfile

    def getbinaryfile(remotefile, localfile = File.basename(remotefile), blocksize = DEFAULT_BLOCKSIZE, &block)
      f = nil
      result = nil
      if localfile
        if @resume
          rest_offset = File.size?(localfile)
          f = File.open(localfile, "a") # FIX: open -> File.open
        else
          rest_offset = nil
          f = File.open(localfile, "w") # FIX: open -> File.open
        end
      elsif !block_given?
        result = String.new
      end
      begin
        f&.binmode
        retrbinary("RETR #{remotefile}", blocksize, rest_offset) do |data|
          f&.write(data)
          block&.(data)
          result&.concat(data)
        end
        return result
      ensure
        f&.close
      end
    end

    def gettextfile(remotefile, localfile = File.basename(remotefile), &block)
      f = nil
      result = nil
      if localfile
        f = File.open(localfile, "w") # FIX: open -> File.open
      elsif !block_given?
        result = String.new
      end
      begin
        retrlines("RETR #{remotefile}") do |line, newline|
          l = newline ? line + "\n" : line
          f&.print(l)
          block&.(line, newline)
          result&.concat(l)
        end
        return result
      ensure
        f&.close
      end
    end

    def putbinaryfile(localfile, remotefile = File.basename(localfile), blocksize = DEFAULT_BLOCKSIZE, &block)
      if @resume
        begin
          rest_offset = size(remotefile)
        rescue Net::FTPPermError
          rest_offset = nil
        end
      else
        rest_offset = nil
      end
      f = File.open(localfile) # FIX: open -> File.open
      begin
        f.binmode
        if rest_offset
          storbinary("APPE #{remotefile}", f, blocksize, rest_offset, &block)
        else
          storbinary("STOR #{remotefile}", f, blocksize, rest_offset, &block)
        end
      ensure
        f.close
      end
    end

    def puttextfile(localfile, remotefile = File.basename(localfile), &block)
      f = File.open(localfile) # FIX: open -> File.open
      begin
        storlines("STOR #{remotefile}", f, &block)
      ensure
        f.close
      end
    end
  end
end
