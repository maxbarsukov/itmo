import numpy as np
import matplotlib.pyplot as plt
from math import sqrt

# Экспериментальные данные
x_data = np.array([3, 10, 16, 23, 31, 40, 49, 57])
y_data = np.array([39.6, 22.6, 12.7, -3.2, -17.1, -34.9, -55.3, -69.8])

# Диапазон X для построения линий
x_line = np.linspace(0, 60, 400)


# -----------------------------------------------


# Линейная функция:

# Метод наименьших квадратов
# *  Функция: f(x) = a + b * x
# *  Коэффициенты (a, b): [44.3352, -2.0091]
# *  Среднеквадратичное отклонение: σ = 1.11492
# *  Коэффициент детерминации: R^2 = 0.99903, (высокая точность аппроксимации)
# *  Мера отклонения: S = 9.94437
# *  Коэффициент корреляции Пирсона: r = -0.9995172574286714, (строгая линейная функциональная зависимость)

a0_ls = 44.335
a1_ls = -2.009

# Предсказания линейной регрессии
y_ls = a0_ls + a1_ls * x_line

# Метод средних квадратов
a0_mean = 43.588
a1_mean = -1.986

# Предсказания линейной регрессии
y_mean = a0_mean + a1_mean * x_line


# -----------------------------------------------


# Параметры квадратичной модели регрессии

# Полиноминальная 2-й степени функция:
# *  Функция: f(x) = a + b * x + c * x ** 2
# *  Коэффициенты (a, b, c): [44.6183, -2.0383, 0.0005]
# *  Среднеквадратичное отклонение: σ = 1.10720
# *  Коэффициент детерминации: R^2 = 0.99905, (высокая точность аппроксимации)
# *  Мера отклонения: S = 9.80710

a0_quad = 44.6183
a1_quad = -2.0383
a2_quad = 0.0005

# Предсказания квадратичной регрессии
y_quad = a0_quad + a1_quad * x_line + a2_quad * x_line**2


# -----------------------------------------------


# Построение графиков
plt.figure(figsize=(12, 8))

# Точки данных
plt.scatter(x_data, y_data, color='purple', s=50, zorder=5, label='Экспериментальные данные')


# -----------------------------------------------

# Доверительная область для линейной модели МНК

# # Доверительный интервал для всех a0 и a1
# a0_dov = np.linspace(42.60206, 46.06826, 100)
# a1_dov = np.linspace(-2.06046, -1.95772, 100)
# labeled = False
# for a0_d in a0_dov:
#     for a1_d in a1_dov:
#         if labeled:
#             plt.plot(x_line, a0_d + a1_d * x_line, 'lightgray', alpha=0.1)
#         else:
#             labeled = True
#             plt.plot(x_line, a0_d + a1_d * x_line, 'lightgray', alpha=0.1, label='Доверительная область для линейной модели МНК')


# Доверительный интервал для всех функции
f_dov_from = lambda x : 44.335 + (-2.009)*x - 2.02 * sqrt(0.73977 - 0.01861 * x + 0.00065*x**2)
f_dov_to = lambda x : 44.335 + (-2.009)*x + 2.02 * sqrt(0.73977 - 0.01861 * x + 0.00065*x**2)

np_f_dov_from = np.vectorize(f_dov_from)
np_f_dov_to = np.vectorize(f_dov_to)

# plt.plot(x_line, np_f_dov_from(x_line), color='gray', linestyle='--')
# plt.plot(x_line, np_f_dov_to(x_line), color='gray', linestyle='--')

plt.fill_between(x_line, np_f_dov_from(x_line), np_f_dov_to(x_line), color='gray', alpha=0.3, label='Доверительная область')

# -----------------------------------------------


# Линии линейной регрессии
plt.plot(x_line, y_mean, 'b--', label='Линейная регрессия (метод средних)')
plt.plot(x_line, y_ls, 'r-', label='Линейная регрессия (МНК)')

# Линия квадратичной регрессии
plt.plot(x_line, y_quad, 'g-', label='Квадратичная регрессия')

# Настройки графика
plt.title('Анализ регрессии с доверительной областью')
plt.xlabel('X')
plt.ylabel('Y')
plt.grid(True)
plt.legend()
plt.show()
