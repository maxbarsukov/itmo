openapi: 3.0.4
info:
  title: People Collection API
  version: 1.0.0
  description: API for managing a collection of Person objects with advanced filtering, sorting and pagination capabilities

servers:
  - url: https://localhost:51313/api/v1'
    description: Helios server

paths:
  /people:
    get:
      summary: Get list of people with sorting and pagination
      description: Returns a list of people. Supports sorting and pagination via query parameters. For complex filtering, use POST /people/search.
      operationId: getPeople
      parameters:
        - name: sortBy
          in: query
          description: Field name to sort by (e.g., 'name', 'height', 'location.x')
          required: false
          schema:
            type: string
            enum:
              - id
              - name
              - creationDate
              - coordinates.x
              - coordinates.y
              - height
              - eyeColor
              - hairColor
              - nationality
              - location.x
              - location.y
              - location.z
              - location.name
        - name: sortOrder
          in: query
          description: Sort order, 'asc' for ascending (default) or 'desc' for descending
          required: false
          schema:
            type: string
            enum: [asc, desc]
            default: asc
        - name: page
          in: query
          required: false
          description: Specifies the page number (zero-based). Default page size is 10.
          schema:
            type: integer
            default: 0
            minimum: 0
        - name: pageSize
          in: query
          required: false
          description: Specifies the number of items per page. Default is 10.
          schema:
            type: integer
            default: 10
            minimum: 1
      tags:
        - People
      responses:
        '200':
          description: Returns an array of people based on the specified parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PeopleResponse'
        '400':
          description: Bad Request - Invalid query parameter value (e.g., invalid field name for sortBy)
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 400
                  message:
                    type: string
                    example: One or more query parameters contain invalid values
                  time:
                    type: string
                    format: date-time
        '422':
          description: Unprocessable Content - Semantic error in parameters (e.g., page=0 but pageSize=-5)
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 422
                  message:
                    type: string
                    example: Query parameters contain logical inconsistencies
                  time:
                    type: string
                    format: date-time
        '429':
          description: Too Many Requests - Rate limit exceeded
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 429
                  message:
                    type: string
                    example: Rate limit exceeded. Please try again later.
                  time:
                    type: string
                    format: date-time
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 500
                  message:
                    type: string
                    example: An unexpected error occurred while fetching people
                  time:
                    type: string
                    format: date-time

    post:
      summary: Add a new person
      description: Creates a new person in the collection
      operationId: addPerson
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonInput'
      tags:
        - People
      responses:
        '201':
          description: Person successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        '400':
          description: Bad Request - Invalid input data format
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 400
                  message:
                    type: string
                    example: Request body contains malformed JSON or invalid data format
                  time:
                    type: string
                    format: date-time
        '409':
          description: Conflict - Person with identical unique attributes already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 409
                  message:
                    type: string
                    example: A person with these attributes already exists in the collection
                  time:
                    type: string
                    format: date-time
        '413':
          description: Content Too Large - Request body exceeds server limits
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 413
                  message:
                    type: string
                    example: Request entity is too large
                  time:
                    type: string
                    format: date-time
        '415':
          description: Unsupported Media Type - Request body format not supported
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 415
                  message:
                    type: string
                    example: Content-Type must be application/json
                  time:
                    type: string
                    format: date-time
        '422':
          description: Unprocessable Content - Semantic validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 422
                  message:
                    type: string
                    example: Request contains semantic errors (e.g., invalid enum value)
                  time:
                    type: string
                    format: date-time
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 500
                  message:
                    type: string
                    example: An unexpected error occurred while creating the person
                  time:
                    type: string
                    format: date-time
        '507':
          description: Insufficient Storage - Server cannot store the new resource
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 507
                  message:
                    type: string
                    example: Server storage capacity exceeded
                  time:
                    type: string
                    format: date-time

  /people/search:
    post:
      summary: Search people with complex filters (Async with Callback)
      description: |
        Performs a search for people using complex filter criteria. 
        For large datasets, this operation is processed asynchronously. 
        If the `X-Callback-URL` header is provided, the server will send the results to that URL upon completion.
      operationId: searchPeople
      parameters:
        - name: sortBy
          in: query
          description: Field name to sort by (e.g., 'name', 'height', 'location.x')
          required: false
          schema:
            type: string
            enum:
              - id
              - name
              - creationDate
              - coordinates.x
              - coordinates.y
              - height
              - eyeColor
              - hairColor
              - nationality
              - location.x
              - location.y
              - location.z
              - location.name
        - name: sortOrder
          in: query
          description: Sort order, 'asc' for ascending (default) or 'desc' for descending
          required: false
          schema:
            type: string
            enum: [asc, desc]
            default: asc
        - name: page
          in: query
          required: false
          description: Specifies the page number (zero-based). Default page size is 10.
          schema:
            type: integer
            default: 0
            minimum: 0
        - name: pageSize
          in: query
          required: false
          description: Specifies the number of items per page. Default is 10.
          schema:
            type: integer
            default: 10
            minimum: 1
        - name: X-Callback-URL
          in: header
          description: |
            URL where the server should POST the search results upon completion. 
            If provided, the operation will be processed asynchronously.
          required: false
          schema:
            type: string
            format: uri
            example: "https://se.ifmo.ru/~s367081/soa/webhook/search-results"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterCriteria'
      tags:
        - People
      callbacks:
        searchResultDelivery:
          '{$request.header.X-Callback-URL}':
            post:
              requestBody:
                description: The result of the completed search operation
                required: true
                content:
                  application/json:
                    schema:
                      type: object
                      properties:
                        correlationId:
                          type: string
                          description: Unique ID to correlate this callback with the original request
                          example: "req-12345-abcde"
                        timestamp:
                          type: string
                          format: date-time
                          description: Time when the search was completed
                        data:
                          $ref: '#/components/schemas/PeopleResponse'
                        error:
                          type: object
                          description: Present only if the search failed
                          properties:
                            code:
                              type: integer
                              format: int32
                            message:
                              type: string
              responses:
                '200':
                  description: Callback successfully received by the client
                  content:
                    application/json:
                      schema:
                        type: object
                        properties:
                          status:
                            type: string
                            example: "success"
                          message:
                            type: string
                            example: "Search results successfully processed."
                '204':
                  description: Client acknowledged the callback but does not need to return data
                '400':
                  description: Bad Request - Callback payload is malformed
                  content:
                    application/json:
                      schema:
                        type: object
                        properties:
                          error:
                            type: string
                            example: "Invalid JSON format in callback payload."
                          details:
                            type: string
                            example: "Field 'correlationId' is missing or null."
                '429':
                  description: Too Many Requests - Client is rate-limiting callbacks
      responses:
        '202':
          description: Accepted - Search is being processed asynchronously. Results will be sent to the callback URL.
          headers:
            Location:
              description: URL to check the status of the async task (optional)
              schema:
                type: string
                format: uri
          content:
            application/json:
              schema:
                type: object
                properties:
                  taskId:
                    type: string
                    description: Unique identifier for the search task
                    example: "task-7890"
                  message:
                    type: string
                    example: "Search task accepted. Results will be sent to your callback URL."
                  estimatedCompletion:
                    type: string
                    format: date-time
                    description: Estimated time of completion (optional)
        '400':
          description: Bad Request - Invalid query parameter or malformed request body
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 400
                  message:
                    type: string
                    example: Invalid query parameters or malformed JSON in request body
                  time:
                    type: string
                    format: date-time
        '415':
          description: Unsupported Media Type - Request body must be JSON
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 415
                  message:
                    type: string
                    example: Content-Type header must be 'application/json'
                  time:
                    type: string
                    format: date-time
        '422':
          description: Unprocessable Content - Semantic error in filters, sorting, or pagination
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 422
                  message:
                    type: string
                    example: Search criteria or query parameters contain semantic/logical errors
                  time:
                    type: string
                    format: date-time
        '429':
          description: Too Many Requests - Rate limit for search queries exceeded
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 429
                  message:
                    type: string
                    example: Rate limit for search operations exceeded. Please try again later.
                  time:
                    type: string
                    format: date-time
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 500
                  message:
                    type: string
                    example: An unexpected error occurred while processing the search
                  time:
                    type: string
                    format: date-time

  /people/{id}:
    get:
      summary: Get a person by ID
      description: Returns a person with the specified ID
      operationId: getPerson
      parameters:
        - name: id
          in: path
          required: true
          description: Person ID to find
          schema:
            type: integer
            format: int64
            minimum: 1
      tags:
        - People
      responses:
        '200':
          description: Returns the person with the specified ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        '400':
          description: Bad Request - Invalid ID parameter
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 400
                  message:
                    type: string
                    example: Provided ID parameter is invalid
                  time:
                    type: string
                    format: date-time
        '404':
          description: Not Found - Person not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 404
                  message:
                    type: string
                    example: No person found with the specified ID
                  time:
                    type: string
                    format: date-time
        '429':
          description: Too Many Requests - Rate limit exceeded
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 429
                  message:
                    type: string
                    example: Rate limit exceeded for this endpoint
                  time:
                    type: string
                    format: date-time
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 500
                  message:
                    type: string
                    example: An unexpected error occurred while retrieving the person
                  time:
                    type: string
                    format: date-time
    patch:
      summary: Partially update a person by ID
      description: Partially updates an existing person with the specified ID
      operationId: updatePerson
      parameters:
        - name: id
          in: path
          required: true
          description: Person ID to update
          schema:
            type: integer
            format: int64
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonInput'
      tags:
        - People
      responses:
        '200':
          description: Person successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        '400':
          description: Bad Request - Invalid ID parameter or request body
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 400
                  message:
                    type: string
                    example: Invalid ID parameter or malformed request body
                  time:
                    type: string
                    format: date-time
        '404':
          description: Not Found - Person not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 404
                  message:
                    type: string
                    example: No person found with the specified ID
                  time:
                    type: string
                    format: date-time
        '405':
          description: Method Not Allowed - Validation exception
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 405
                  message:
                    type: string
                    example: Validation failed for one or more fields
                  time:
                    type: string
                    format: date-time
        '409':
          description: Conflict - Update conflicts with current resource state
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 409
                  message:
                    type: string
                    example: Update request conflicts with current state of the resource
                  time:
                    type: string
                    format: date-time
        '415':
          description: Unsupported Media Type - Request body format not supported
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 415
                  message:
                    type: string
                    example: Content-Type must be application/json for PATCH requests
                  time:
                    type: string
                    format: date-time
        '422':
          description: Unprocessable Content - Semantic validation error in update
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 422
                  message:
                    type: string
                    example: Update contains semantic errors (e.g., invalid data for field)
                  time:
                    type: string
                    format: date-time
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 500
                  message:
                    type: string
                    example: An unexpected error occurred while updating the person
                  time:
                    type: string
                    format: date-time
    delete:
      summary: Delete a person by ID
      description: Deletes a person with the specified ID
      operationId: deletePerson
      parameters:
        - name: id
          in: path
          required: true
          description: Person ID to delete
          schema:
            type: integer
            format: int64
            minimum: 1
      tags:
        - People
      responses:
        '204':
          description: Person successfully deleted
        '400':
          description: Bad Request - Invalid ID parameter
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 400
                  message:
                    type: string
                    example: Provided ID parameter is invalid
                  time:
                    type: string
                    format: date-time
        '404':
          description: Not Found - Person not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 404
                  message:
                    type: string
                    example: No person found with the specified ID
                  time:
                    type: string
                    format: date-time
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 500
                  message:
                    type: string
                    example: An unexpected error occurred while deleting the person
                  time:
                    type: string
                    format: date-time

  /people/nationality/{nationality}:
    delete:
      summary: Delete all people with specified nationality
      description: Deletes all people with the specified nationality
      operationId: deletePeopleByNationality
      parameters:
        - name: nationality
          in: path
          required: true
          description: Nationality to filter by
          schema:
            $ref: '#/components/schemas/Country'
      tags:
        - Operations
      responses:
        '204':
          description: People successfully deleted
        '400':
          description: Bad Request - Invalid nationality parameter
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 400
                  message:
                    type: string
                    example: Provided nationality parameter is invalid
                  time:
                    type: string
                    format: date-time
        '404':
          description: Not Found - No people found with specified nationality
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 404
                  message:
                    type: string
                    example: No people found with the specified nationality
                  time:
                    type: string
                    format: date-time
        '429':
          description: Too Many Requests - Rate limit exceeded for bulk operations
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 429
                  message:
                    type: string
                    example: Rate limit exceeded for bulk deletion operations
                  time:
                    type: string
                    format: date-time
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 500
                  message:
                    type: string
                    example: An unexpected error occurred during bulk deletion
                  time:
                    type: string
                    format: date-time

  /people/location:
    delete:
      summary: Delete one person with specified location
      description: Deletes one person with the specified location
      operationId: deleteOnePersonByLocation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Location'
      tags:
        - Operations
      responses:
        '204':
          description: Person successfully deleted
        '400':
          description: Bad Request - Invalid location data in request body
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 400
                  message:
                    type: string
                    example: Location data in request body is invalid or malformed
                  time:
                    type: string
                    format: date-time
        '404':
          description: Not Found - Person with specified location not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 404
                  message:
                    type: string
                    example: No person found with the specified location
                  time:
                    type: string
                    format: date-time
        '415':
          description: Unsupported Media Type - Request body format not supported
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 415
                  message:
                    type: string
                    example: Content-Type must be application/json for location deletion
                  time:
                    type: string
                    format: date-time
        '422':
          description: Unprocessable Content - Semantic error in location data
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 422
                  message:
                    type: string
                    example: Location data contains semantic errors
                  time:
                    type: string
                    format: date-time
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 500
                  message:
                    type: string
                    example: An unexpected error occurred during location-based deletion
                  time:
                    type: string
                    format: date-time

  /people/location/greater:
    get:
      summary: Get people with location greater than specified
      description: Returns people whose location is greater than the specified coordinates
      operationId: getPeopleWithLocationGreaterThan
      parameters:
        - name: x
          in: query
          required: true
          description: Location X coordinate to compare against
          schema:
            type: integer
        - name: y
          in: query
          required: true
          description: Location Y coordinate to compare against
          schema:
            type: integer
            format: int64
        - name: z
          in: query
          required: true
          description: Location Z coordinate to compare against
          schema:
            type: integer
      tags:
        - Operations
      responses:
        '200':
          description: Returns people with location greater than specified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PeopleResponse'
        '400':
          description: Bad Request - Invalid location parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 400
                  message:
                    type: string
                    example: One or more location parameters are invalid
                  time:
                    type: string
                    format: date-time
        '422':
          description: Unprocessable Content - Semantic error in location comparison parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 422
                  message:
                    type: string
                    example: Location comparison parameters contain semantic errors
                  time:
                    type: string
                    format: date-time
        '429':
          description: Too Many Requests - Rate limit exceeded
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 429
                  message:
                    type: string
                    example: Rate limit exceeded for location comparison queries
                  time:
                    type: string
                    format: date-time
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 500
                  message:
                    type: string
                    example: An unexpected error occurred during location comparison
                  time:
                    type: string
                    format: date-time

components:
  schemas:
    Person:
      type: object
      required:
        - id
        - name
        - coordinates
        - creationDate
        - eyeColor
        - location
      properties:
        id:
          type: integer
          format: int64
          minimum: 1
          readOnly: true
          description: Auto-generated unique identifier
        name:
          type: string
          minLength: 1
          description: Person's name
        coordinates:
          $ref: '#/components/schemas/Coordinates'
        creationDate:
          type: string
          format: date-time
          readOnly: true
          description: Auto-generated creation date
        height:
          type: number
          format: float
          minimum: 0
          exclusiveMinimum: true
          nullable: true
          description: Person's height
        eyeColor:
          $ref: '#/components/schemas/EyeColor'
        hairColor:
          $ref: '#/components/schemas/HairColor'
          nullable: true
        nationality:
          $ref: '#/components/schemas/Country'
          nullable: true
        location:
          $ref: '#/components/schemas/Location'

    PersonInput:
      type: object
      required:
        - name
        - coordinates
        - eyeColor
        - location
      properties:
        name:
          type: string
          minLength: 1
          description: Person's name
        coordinates:
          $ref: '#/components/schemas/Coordinates'
        height:
          type: number
          format: float
          minimum: 0
          exclusiveMinimum: true
          nullable: true
          description: Person's height
        eyeColor:
          $ref: '#/components/schemas/EyeColor'
        hairColor:
          $ref: '#/components/schemas/HairColor'
          nullable: true
        nationality:
          $ref: '#/components/schemas/Country'
          nullable: true
        location:
          $ref: '#/components/schemas/Location'

    Coordinates:
      type: object
      required:
        - x
        - y
      properties:
        x:
          type: integer
          nullable: false
        y:
          type: integer
          nullable: false

    Location:
      type: object
      required:
        - x
        - y
        - z
      properties:
        x:
          type: integer
          nullable: false
        y:
          type: integer
          format: int64
          nullable: false
        z:
          type: integer
          nullable: false
        name:
          type: string
          maxLength: 704
          nullable: true

    EyeColor:
      type: string
      enum:
        - RED
        - BLUE
        - YELLOW
        - ORANGE
      description: Eye color enumeration

    HairColor:
      type: string
      enum:
        - GREEN
        - RED
        - YELLOW
        - ORANGE
        - BROWN
      description: Hair color enumeration

    Country:
      type: string
      enum:
        - CHINA
        - INDIA
        - ITALY
        - NORTH_KOREA
      description: Country enumeration

    PeopleResponse:
      type: object
      properties:
        people:
          type: array
          items:
            $ref: '#/components/schemas/Person'
        page:
          type: integer
          nullable: true
          description: Current page number
        pageSize:
          type: integer
          nullable: true
          description: Number of items per page
        totalPages:
          type: integer
          nullable: true
          description: Total number of pages
        totalCount:
          type: integer
          nullable: true
          description: Total number of items

    Error:
      type: object
      required:
        - code
        - message
        - time
      properties:
        code:
          type: integer
          format: int32
          description: HTTP status code
        message:
          type: string
          description: Error description
        time:
          type: string
          format: date-time
          description: Error occurrence time

    FilterCriteria:
      type: object
      description: Criteria for filtering people in a search request
      properties:
        filters:
          type: array
          description: Array of filter conditions to apply
          items:
            type: object
            required:
              - field
              - operator
              - value
            properties:
              field:
                type: string
                description: The field to filter on
                enum:
                  - id
                  - name
                  - creationDate
                  - coordinates.x
                  - coordinates.y
                  - height
                  - eyeColor
                  - hairColor
                  - nationality
                  - location.x
                  - location.y
                  - location.z
                  - location.name
              operator:
                type: string
                description: The comparison operator
                enum: [eq, ne, gt, lt, gte, lte]
              value:
                type: string
                description: The value to compare against (will be parsed to appropriate type on server)
      example:
        filters:
          - field: "name"
            operator: "eq"
            value: "John"
          - field: "height"
            operator: "gt"
            value: "1.75"
