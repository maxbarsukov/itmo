import matplotlib.pyplot as plt
import numpy as np

MESSAGE = "11000001 11001100 11000000"
# MESSAGE = "0 1 0 1 0 1 0 0 0 0 1 1 1 1 0 1 1 0 0" # Пример из презентации

# Сообщение
message = MESSAGE.replace(" ", "") # Удаляем пробелы

# Подготовка данных для графика
bits = len(message)
# Для каждого бита нам нужно 4 точки (начало, середина-вниз, середина-вверх, конец)
x = np.zeros(bits * 4)
y = np.zeros(bits * 4)

# Линейное построение графика манчестерской кодировки
for i in range(bits):
    # Каждый бит занимает интервал от i до i+1
    # Четыре точки для каждого бита для создания перехода в середине
    x[i*4]   = i        # Начало бита
    x[i*4+1] = i+0.5    # Середина бита (первая точка перехода)
    x[i*4+2] = i+0.5    # Середина бита (вторая точка перехода)
    x[i*4+3] = i+1      # Конец бита

    if message[i] == '1':
        # Для '1' начинаем с высокого уровня и переходим на низкий
        y[i*4]   =  1   # Начало с высокого уровня
        y[i*4+1] =  1   # До середины высокий
        y[i*4+2] = -1   # После середины низкий
        y[i*4+3] = -1   # Конец на низком уровне
    else:  # Если бит = '0'
        # Для '0' начинаем с низкого уровня и переходим на высокий
        y[i*4]   = -1   # Начало с низкого уровня
        y[i*4+1] = -1   # До середины низкий
        y[i*4+2] =  1   # После середины высокий
        y[i*4+3] =  1   # Конец на высоком уровне

# Создание графика
plt.figure(figsize=(12, 6))

# Рисуем горизонтальные линии черным цветом
for i in range(bits):
    # Горизонтальная линия до перехода
    plt.plot([x[i*4], x[i*4+1]], [y[i*4], y[i*4+1]], 'k-', linewidth=2)
    # Горизонтальная линия после перехода
    plt.plot([x[i*4+2], x[i*4+3]], [y[i*4+2], y[i*4+3]], 'k-', linewidth=2)

# Рисуем переходы разными цветами
for i in range(bits):
    # Переход в середине бита
    if message[i] == '1':
        plt.plot([x[i*4+1], x[i*4+2]], [y[i*4+1], y[i*4+2]], 'b-', linewidth=2, label="Переход 1 → 0" if i == 0 else "")
    else:
        plt.plot([x[i*4+1], x[i*4+2]], [y[i*4+1], y[i*4+2]], 'r-', linewidth=2, label="Переход 0 → 1" if i == 0 else "")

# Добавляем служебные переходы (дополнительные переходы в начале битового интервала)
for i in range(1, bits):
    if message[i] == message[i-1]:  # Если текущий бит равен предыдущему
        # Служебный переход: меняем уровень в начале битового интервала
        plt.plot([x[i*4], x[i*4]], [y[(i-1)*4+3], y[i*4]], 'k-', linewidth=2)

# Горизонтальная линия для нуля
plt.axhline(y=0, color='gray', linestyle='-', alpha=0.3)

# Добавление вертикальных линий для обозначения границ битов
for i in range(bits+1):
    plt.axvline(x=i, color='gray', linestyle='--', alpha=0.5)

# Добавление меток битов
for i in range(bits):
    color = 'red' if message[i] == '0' else 'blue'
    plt.text(i+0.5, -1.9, message[i], horizontalalignment='center', fontsize=12, color=color, fontweight='bold')

# Настройка осей
plt.ylim(-2.2, 2.2)
plt.yticks([-1, 0, 1], ['-1', '0', '1'])
plt.xticks(range(0, bits+1))

# Подписи
plt.title('M2 (Манчестерское кодирование)')
plt.xlabel('Биты')
plt.ylabel('Уровень сигнала')
plt.grid(True, alpha=0.3)

plt.tight_layout()
plt.show()
