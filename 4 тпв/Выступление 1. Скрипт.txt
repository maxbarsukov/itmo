В мире функционального программирования

Друзья.

Меня зовут Максим, я студент 2 курса Университета ИТМО, и сегодня я хочу поговорить с вами о том, как сделать ваши программы лучше, чище и понятнее. Сегодня мы с вами погрузимся в мир функционального программирования.

Я думаю многие из вас, сталкиваясь с неизвестным словосочетанием "Функциональное программирование", хотели узнать, что это такое, и находили занятные и многообещающие статьи и посты в блогах. Если вы ищете в правильном месте, то как минимум одна такая статья будет встречаться вам каждые несколько дней. В этих постах сложно разобраться, на это требуется время, и поэтому они накапливаются в папке «Прочитать».

Действительно, статьи о функциональном программировании трудны для понимания, но их можно написать проще.

Причина возникшей пропасти знаний чисто историческая. По сути в концепции функционального рограммирования нет ничего сложного. Взгляните на эту лекцию, как на «доступное руководство по функциональному программированию», как на мостик между нашими императивными умами и миром функционального программирования.

Много лет назад умные ребята собрались и придумали такую штуку как лямбда-исчисление.
Это строгая формальная математическая теория, которая разрабатывалась годами.
И она легла в основу функционального программирования.

И когда мы пишем код на императивном или объектно-ориентированном языке программированию, нам иногда не хватает вот этой строгой формальности.
Нам становится грустно. Мы открываем проект и видим там очень много непонятного кода.

И мне хотелось бы добавить туда немножко функционального света: строгости, четкости и лаконичности, для того, чтобы сделать этот код более понятным.

Самая важная часть функционального программирования это сделать код понятнее.

Мы не будем рассматривать всякие супер сложности и какие-то абстрактные темы из мира функционального программирования.
Мы рассмотрим простые концепции, которые мы сможем применить для написания наших программ, чтобы они были более чистыми и понятными и добавить туда немного функционального света.

Почему код должен быть более понятным? Потому что понимание это равно доверие.

Когда я вижу какую-то функцию и понимаю, как она работает, я сразу ей доверяю.

Я знаю, что здесь нет никаких скрытых побочных эффектов, мутаций состояния или чего-то еще, что может сделать код непонятным и запутанным.

И это не просто так. Функциональное программирование делает код понятнее за счет того, что мы пишем код немножко в другом стиле.

Если вы хотите научиться доверять своему коду, улучшить его читаемость и поддерживаемость, то функциональное программирование может стать вашим надежным союзником.

Давайте вместе исследуем этот увлекательный мир и обнаружим некоторые концепции и приемы, которые помогут нам писать код, радующий нас своей ясностью и элегантностью.

Спасибо за внимание!

